def testRollbackEnvironment(Map config) {
    echo "üîÅ Testing ${env.ROLLBACK_ENV} environment before traffic switch..."

    try {
        // Get app name from config or default to app_1
        def appName = config.appName ?: env.APP_NAME ?: "app_1"
        def appSuffix = appName.replace("app_", "")
        
        // Determine path pattern for testing based on app
        def testPathPattern = "/test*"
        if (appSuffix != "1") {
            testPathPattern = "/app${appSuffix}/test*"
        }
        
        // Remove existing test rule (priority 10) if it exists
        sh """
        echo "Checking for existing test rule on listener..."
        TEST_RULE=\$(aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query "Rules[?Priority=='10'].RuleArn" --output text)
        
        if [ ! -z "\$TEST_RULE" ]; then
            echo "Deleting existing test rule..."
            aws elbv2 delete-rule --rule-arn \$TEST_RULE
        fi

        echo "Creating new test rule for ${testPathPattern} to point to ${env.ROLLBACK_TG_ARN}..."
        aws elbv2 create-rule \\
            --listener-arn ${env.LISTENER_ARN} \\
            --priority 10 \\
            --conditions '[{"Field":"path-pattern","Values":["${testPathPattern}"]}]' \\
            --actions '[{"Type":"forward","TargetGroupArn":"${env.ROLLBACK_TG_ARN}"}]'
        """

        // Wait and test health
        sh """
        echo "Waiting for rule to propagate..."
        sleep 10

        echo "Testing health endpoint on rollback environment..."
        curl -f http://${env.ALB_DNS}${testPathPattern.replace('*', '')}health \\
        || curl -f http://${env.ALB_DNS}${testPathPattern.replace('*', '')} \\
        || echo "‚ö†Ô∏è Health check failed, but proceeding with rollback"
        """

        echo "‚úÖ Rollback environment (${env.ROLLBACK_ENV}) tested successfully"

    } catch (Exception e) {
        echo "‚ö†Ô∏è Warning: Rollback test encountered an issue: ${e.message}"
        echo "Proceeding with rollback despite test issues"
    }
}

def executeEcsRollback(Map config) {
    echo "üîÑ Switching traffic to ${env.ROLLBACK_ENV} for rollback..."

    try {
        // Get app name from config or default to app_1
        def appName = config.appName ?: env.APP_NAME ?: "app_1"
        def appSuffix = appName.replace("app_", "")
        
        if (!env.ROLLBACK_TG_ARN || env.ROLLBACK_TG_ARN == "null") {
            error "‚ùå Invalid rollback target group ARN: ${env.ROLLBACK_TG_ARN}"
        }

        echo "Using rollback target group ARN: ${env.ROLLBACK_TG_ARN}"

        // For app-specific routing, we need to check if there's a path-based rule for this app
        def appPathPattern = appSuffix == "1" ? "/" : "/app${appSuffix}/*"
        
        def existingRuleArn = sh(
            script: """
                aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} \\
                --query "Rules[?contains(Actions[0].ForwardConfig.TargetGroups[0].TargetGroupArn,'${env.CURRENT_TG_ARN}') || contains(Actions[0].TargetGroupArn,'${env.CURRENT_TG_ARN}')].RuleArn" \\
                --output text
            """,
            returnStdout: true
        ).trim()
        
        if (existingRuleArn) {
            // Update existing rule to point to rollback target group
            sh """
                aws elbv2 modify-rule \\
                    --rule-arn ${existingRuleArn} \\
                    --actions Type=forward,TargetGroupArn=${env.ROLLBACK_TG_ARN}
            """
            echo "‚úÖ Updated existing rule to route traffic to ${env.ROLLBACK_ENV}"
        } else {
            // If no specific rule exists, check if we need to modify the default action or create a new rule
            def currentTargetGroup = sh(
                script: """
                    aws elbv2 describe-listeners --listener-arns ${env.LISTENER_ARN} \\
                    --query 'Listeners[0].DefaultActions[0].ForwardConfig.TargetGroups[0].TargetGroupArn || Listeners[0].DefaultActions[0].TargetGroupArn' \\
                    --output text
                """,
                returnStdout: true
            ).trim()

            if (currentTargetGroup == env.CURRENT_TG_ARN) {
                // This is the default route, update it
                sh """
                    aws elbv2 modify-listener \\
                        --listener-arn ${env.LISTENER_ARN} \\
                        --default-actions Type=forward,TargetGroupArn=${env.ROLLBACK_TG_ARN}
                """
                echo "‚úÖ Traffic switched 100% to ${env.ROLLBACK_ENV} (default route)"
            } else {
                // Create a new rule for this app
                // Find an available priority
                def usedPriorities = sh(
                    script: """
                    aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query 'Rules[?Priority!=`default`].Priority' --output json
                    """,
                    returnStdout: true
                ).trim()
                
                def usedPrioritiesJson = readJSON text: usedPriorities
                def priority = 50  // Start with a lower priority for app routing
                
                // Find the first available priority
                while (usedPrioritiesJson.contains(priority.toString())) {
                    priority++
                }
                
                sh """
                    aws elbv2 create-rule \\
                        --listener-arn ${env.LISTENER_ARN} \\
                        --priority ${priority} \\
                        --conditions '[{"Field":"path-pattern","Values":["${appPathPattern}"]}]' \\
                        --actions '[{"Type":"forward","TargetGroupArn":"${env.ROLLBACK_TG_ARN}"}]'
                """
                echo "‚úÖ Created new rule with priority ${priority} to route ${appPathPattern} to ${env.ROLLBACK_ENV}"
            }
        }

        // Clean up test rule
        sh """
            TEST_RULE=\$(aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query "Rules[?Priority=='10'].RuleArn" --output text)

            if [ ! -z "\$TEST_RULE" ]; then
                echo "Removing existing test rule..."
                aws elbv2 delete-rule --rule-arn \$TEST_RULE
            fi
        """

        echo "‚úÖ‚úÖ‚úÖ ECS rollback completed successfully!"

    } catch (Exception e) {
        error "‚ùå Failed to switch traffic for ECS rollback: ${e.message}"
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def postRollbackActions(Map config) {
    echo "üìâ Scaling down current ${env.CURRENT_ENV} environment..."

    try {
        // Get app name from config or default to app_1
        def appName = config.appName ?: env.APP_NAME ?: "app_1"
        def appSuffix = appName.replace("app_", "")
        
        // Scale down the current service
        sh """
        aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.CURRENT_SERVICE} --desired-count 0
        """
        echo "‚úÖ Current service (${env.CURRENT_ENV}) scaled down"

        // Wait for current service to stabilize
        sh """
        aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.CURRENT_SERVICE}
        """
        echo "‚úÖ Current service is stable"

        // --- Scale up rolled-back service ---
        def rollbackServiceName = env.ROLLBACK_SERVICE
        echo "‚¨ÜÔ∏è Scaling up rolled-back service: ${rollbackServiceName}"

        sh """
        aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${rollbackServiceName} --desired-count 1
        """
        echo "‚úÖ Rolled-back service scaling initiated"

        // Wait for rolled-back service to stabilize
        sh """
        aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${rollbackServiceName}
        """
        echo "‚úÖ Rolled-back service is stable"

        // --- Wait for all targets in rolled-back TG to be healthy ---
        def rollbackTgArn = env.ROLLBACK_TG_ARN
        
        echo "‚è≥ Waiting for all targets in rollback target group to become healthy..."
        int maxAttempts = 10
        int attempt = 0
        int healthyCount = 0

        while (attempt < maxAttempts) {
            def healthJson = sh(
                script: "aws elbv2 describe-target-health --target-group-arn ${rollbackTgArn} --query 'TargetHealthDescriptions[*].TargetHealth.State' --output json",
                returnStdout: true
            ).trim()

            def states = new JsonSlurper().parseText(healthJson)
            healthyCount = states.count { it == "healthy" }
            echo "Healthy targets: ${healthyCount} / ${states.size()}"

            if (states && healthyCount == states.size()) {
                echo "‚úÖ All targets in rollback target group are healthy."
                break
            }

            attempt++
            sleep 10
        }

        if (healthyCount == 0) {
            error "‚ùå No healthy targets in rollback target group after waiting."
        }

        // --- Switch ALB listener to rolled-back environment BEFORE ECR cleanup ---
        echo "üîÑ Ensuring traffic is routed to rolled-back environment (${env.ROLLBACK_ENV})..."

        // For app-specific routing, we need to check if there's a path-based rule for this app
        def appPathPattern = appSuffix == "1" ? "/" : "/app${appSuffix}/*"
        
        def existingRuleArn = sh(
            script: """
                aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} \\
                --query "Rules[?contains(Conditions[0].PathPatternConfig.Values,'${appPathPattern}')].RuleArn" \\
                --output text
            """,
            returnStdout: true
        ).trim()
        
        if (existingRuleArn) {
            // Ensure rule points to rollback target group
            sh """
                aws elbv2 modify-rule \\
                    --rule-arn ${existingRuleArn} \\
                    --actions Type=forward,TargetGroupArn=${rollbackTgArn}
            """
            echo "‚úÖ Ensured rule routes ${appPathPattern} to ${env.ROLLBACK_ENV}"
        } else if (appSuffix == "1") {
            // For app1, we might need to update the default action
            def forwardAction = [
                [
                    Type: "forward",
                    ForwardConfig: [
                        TargetGroups: [
                            [TargetGroupArn: rollbackTgArn, Weight: 1]
                        ]
                    ]
                ]
            ]
            def jsonFile = 'rollback-forward-config.json'
            writeFile file: jsonFile, text: JsonOutput.prettyPrint(JsonOutput.toJson(forwardAction))

            sh """
            aws elbv2 modify-listener \\
              --listener-arn ${env.LISTENER_ARN} \\
              --default-actions file://${jsonFile}
            """
            echo "‚úÖ Updated default route to ${env.ROLLBACK_ENV}"
        } else {
            // Create a new rule for this app
            // Find an available priority
            def usedPriorities = sh(
                script: """
                aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query 'Rules[?Priority!=`default`].Priority' --output json
                """,
                returnStdout: true
            ).trim()
            
            def usedPrioritiesJson = readJSON text: usedPriorities
            def priority = 50  // Start with a lower priority for app routing
            
            // Find the first available priority
            while (usedPrioritiesJson.contains(priority.toString())) {
                priority++
            }
            
            sh """
                aws elbv2 create-rule \\
                    --listener-arn ${env.LISTENER_ARN} \\
                    --priority ${priority} \\
                    --conditions '[{"Field":"path-pattern","Values":["${appPathPattern}"]}]' \\
                    --actions '[{"Type":"forward","TargetGroupArn":"${rollbackTgArn}"}]'
            """
            echo "‚úÖ Created new rule with priority ${priority} to route ${appPathPattern} to ${env.ROLLBACK_ENV}"
        }

        // Begin ECR cleanup
        echo "üßπ Cleaning up old images from ECR repository..."

        try {
            def imagesOutput = sh(
                script: """
                aws ecr describe-images --repository-name ${env.ECR_REPO_NAME} --output json
                """,
                returnStdout: true
            ).trim()

            def imagesJson = readJSON text: imagesOutput
            def imageDetails = imagesJson.imageDetails

            echo "Found ${imageDetails.size()} images in repository"

            def latestImageDigest = null
            def rollbackImageDigest = null
            def rollbackDate = null

            imageDetails.each { image ->
                def digest = image.imageDigest
                def tags = image.imageTags ?: []

                if (tags.contains("${appName}-latest")) {
                    latestImageDigest = digest
                    echo "Found latest image for ${appName}: ${digest}"
                }

                tags.each { tag ->
                    if (tag == "${appName}-rollback") {
                        def pushedAt = image.imagePushedAt
                        if (!rollbackDate || pushedAt > rollbackDate) {
                            rollbackImageDigest = digest
                            rollbackDate = pushedAt
                            echo "Found rollback image for ${appName}: ${digest} with tag ${tag}"
                        }
                    }
                }
            }

            echo "Latest image digest to keep: ${latestImageDigest ?: 'None'}"
            echo "Rollback image digest to keep: ${rollbackImageDigest ?: 'None'}"

            // Only delete images related to this app
            imageDetails.each { image ->
                def digest = image.imageDigest
                def tags = image.imageTags ?: []
                
                // Only process images related to this app
                def appRelatedTags = tags.findAll { it.startsWith(appName) }
                
                if (appRelatedTags.size() > 0 && digest != latestImageDigest && digest != rollbackImageDigest) {
                    echo "Deleting image: ${digest}, tags: ${appRelatedTags}"
                    sh """
                    aws ecr batch-delete-image \\
                        --repository-name ${env.ECR_REPO_NAME} \\
                        --image-ids imageDigest=${digest}
                    """
                }
            }

            echo "‚úÖ ECR repository cleanup completed for ${appName}"

        } catch (Exception e) {
            echo "‚ö†Ô∏è Warning: ECR cleanup encountered an issue: ${e.message}"
            echo "Continuing despite cleanup issues"
        }

        // Final email notification
        emailext (
            to: config.emailRecipient,
            subject: "Rollback completed successfully for ${appName} - Build ${currentBuild.number}",
            body: """
                Rollback has been completed successfully for ${appName}.
                
                Previous environment: ${env.CURRENT_ENV}
                Rolled back to: ${env.ROLLBACK_ENV}
                Rolled back to image: ${env.ROLLBACK_IMAGE}
                
                The application is now accessible at: http://${env.ALB_DNS}${appSuffix == "1" ? "" : "/app" + appSuffix}
            """,
            replyTo: config.emailRecipient
        )

    } catch (Exception e) {
        echo "‚ö†Ô∏è Warning: Scale down encountered an issue: ${e.message}"
        echo "Continuing despite scale down issues"
    }
}